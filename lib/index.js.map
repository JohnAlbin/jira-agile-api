{"version":3,"sources":["../src/index.js"],"names":["endpointUrl","api","defaultSettings","mode","cache","setSetting","key","value","esc","encodeURIComponent","encodeGetQuery","Object","keys","params","map","k","join","url","uri","query","sendRequest","settings","fetch","then","response","json","setEndpoint","sendGetRequest","resourceUri","method","sendRequestWithPayload","payload","httpMethod","body","JSON","stringify","sendDeleteRequest","backlog","moveIssuesToBacklog","issues","board","getList","getSingle","boardId","getIssues","getBacklog","getConfiguration","getSprints","getSprintIssues","sprintId","create","name","type","filterId","otherValues","delete","issue","issueIdOrKey","getEstimation","setEstimation","sprint","originBoardId","update","newValue","partialUpdate","fieldsToUpdate","moveIssuesToSprint","swapWith","secondSprintId","sprintToSwapWith","getPropertiesKeys","deleteProperty","propertyKey","setProperty","getProperty","util","getSprintHistory"],"mappings":"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","file":"index.js","sourcesContent":["import getSprintHistory from './util/getSprintHistory';\n\nlet endpointUrl = 'http://localhost:3001';\nconst api = 'rest/agile/1.0';\n\nconst defaultSettings = {\n  mode: 'cors',\n  cache: 'default',\n};\n\nexport const setSetting = (key, value) =>\n  defaultSettings[key] = value;\n\nconst esc = encodeURIComponent;\n\nconst encodeGetQuery = params =>\n  Object.keys(params)\n    .map(k => `${esc(k)}=${esc(params[k])}`)\n    .join('&');\n\nconst url = (uri, query) =>\n  `${endpointUrl}/${api}/${uri}?${encodeGetQuery(query)}`;\n\nconst sendRequest = (uri, settings, query = {}) =>\n  fetch(url(uri, query), { ...defaultSettings, ...settings })\n    .then(response => response.json());\n\nexport const setEndpoint = (url) =>\n  endpointUrl = url;\n\nexport const sendGetRequest = (resourceUri, query = {}) =>\n  sendRequest(resourceUri, { method: 'GET' }, query);\n\nexport const sendRequestWithPayload = (resourceUri, payload, httpMethod = 'POST', query = {}) =>\n  sendRequest(resourceUri, { method: httpMethod, body: JSON.stringify(payload) }, query);\n\nexport const sendDeleteRequest = (resourceUri) =>\n  sendRequest(resourceUri, { method: 'DELETE' });\n\nexport const backlog = {};\n\n/**\n * @param string[] issues\n *   Array of issue ids, eg ['PR-1'].\n */\nbacklog.moveIssuesToBacklog = issues =>\n  sendRequestWithPayload('backlog/issue', {issues: issues})\n\nexport const board = {};\n\nboard.getList = (params) =>\n  sendGetRequest('board', params);\n\nboard.getSingle = (boardId, params) =>\n  sendGetRequest(`board/${boardId}`, params);\n\nboard.getIssues = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/issues`, params);\n\nboard.getBacklog = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/backlog`, params);\n\nboard.getConfiguration = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/configuration`, params);\n\nboard.getSprints = (boardId, params) =>\n  sendGetRequest(`board/${boardId}/sprint`, params);\n\nboard.getSprintIssues = (boardId, sprintId, params) =>\n  sendGetRequest(`board/${boardId}/sprint/${sprintId}/issue`, params);\n\nboard.create = (name, type, filterId, otherValues = {}) =>\n  sendRequestWithPayload('board', {\n    name,\n    type,\n    filterId,\n    ... otherValues\n  });\n\nboard.delete = (boardId) =>\n  sendDeleteRequest(`board/${boardId}`);\n\nexport const issue = {};\n\nissue.getSingle = (issueIdOrKey, params) =>\n  sendGetRequest(`issue/${issueIdOrKey}`, params);\n\nissue.getEstimation = (issueIdOrKey, params) =>\n  sendGetRequest(`issue/${issueIdOrKey}/estimation`, params);\n\nissue.setEstimation = (issueIdOrKey, boardId, value) =>\n  sendRequestWithPayload(\n    `issue/${issueIdOrKey}/estimation`,\n    { value },\n    'PUT',\n    { boardId }\n  );\n\nexport const sprint = {};\n\nsprint.create = (name, boardId, otherValues) =>\n  sendRequestWithPayload(`sprint`, {\n    name,\n    originBoardId: boardId,\n    ... otherValues\n  });\n\nsprint.update = (sprintId, newValue) =>\n  sendRequestWithPayload(`sprint/${sprintId}`, newValue, 'PUT');\n\nsprint.partialUpdate = (sprintId, fieldsToUpdate) =>\n  sendRequestWithPayload(`sprint/${sprintId}`, fieldsToUpdate);\n\nsprint.delete = (sprintId) =>\n  sendDeleteRequest(`sprint/${sprintId}`);\n\nsprint.getSingle = (sprintId, params) =>\n  sendGetRequest(`sprint/${sprintId}`, params);\n\nsprint.moveIssuesToSprint = (sprintId, issues) =>\n  sendRequestWithPayload(`sprint/${sprintId}/issue`, { issues });\n\nsprint.getIssues = (sprintId, params) =>\n  sendGetRequest(`sprint/${sprintId}/issue`, params);\n\nsprint.swapWith = (sprintId, secondSprintId) =>\n  sendRequestWithPayload(`sprint/${sprintId}/issue`, { sprintToSwapWith: secondSprintId });\n\nsprint.getPropertiesKeys = (sprintId, params) =>\n  sendGetRequest(`sprint/${sprintId}/properties`, params);\n\nsprint.deleteProperty = (sprintId, propertyKey) =>\n  sendDeleteRequest(`sprint/${sprintId}/properties/${propertyKey}`);\n\nsprint.setProperty = (sprintId, value) =>\n  sendRequestWithPayload(`sprint/${sprintId}/properties/${propertyKey}`, { value }, 'PUT');\n\nsprint.getProperty = (sprintId, propertyKey, params) =>\n  sendGetRequest(`sprint/${sprintId}/properties/${propertyKey}`, params);\n\nexport const util = {\n  getSprintHistory\n};\n"]}