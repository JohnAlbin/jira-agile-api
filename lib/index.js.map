{"version":3,"sources":["../src/index.js"],"names":["endpointUrl","api","fetchSettings","method","mode","cache","esc","encodeURIComponent","makeRequest","params","query","Object","keys","map","k","join","fetch","then","response","json","setEndpoint","url","board","getList","getSingle","boardId","getIssues","getBacklog","getConfiguration","getSprints","getSprintIssues","sprintId","issue","issueIdOrKey","getEstimation","sprint","getPropertiesKeys","getProperty","property"],"mappings":";;;;;AAAA,IAAIA,cAAc,uBAAlB;AACA,IAAMC,MAAM,gBAAZ;;AAEA,IAAMC,gBAAgB;AACpBC,UAAQ,KADY;AAEpBC,QAAM,MAFc;AAGpBC,SAAO;AAHa,CAAtB;;AAMA,IAAMC,MAAMC,kBAAZ;;AAEO,IAAMC,oCAAc,SAAdA,WAAc,CAACL,MAAD,EAAyB;AAAA,MAAhBM,MAAgB,uEAAP,EAAO;;AAClD,MAAMC,QAAQC,OAAOC,IAAP,CAAYH,MAAZ,EACXI,GADW,CACP;AAAA,WAAQP,IAAIQ,CAAJ,CAAR,SAAkBR,IAAIG,OAAOK,CAAP,CAAJ,CAAlB;AAAA,GADO,EAEXC,IAFW,CAEN,GAFM,CAAd;;AAIA,SAAOC,MAAShB,WAAT,SAAwBC,GAAxB,SAA+BE,MAA/B,SAAyCO,KAAzC,EAAkDR,aAAlD,EACJe,IADI,CACC;AAAA,WAAYC,SAASC,IAAT,EAAZ;AAAA,GADD,CAAP;AAED,CAPM;;AASA,IAAMC,oCAAc,SAAdA,WAAc,CAACC,GAAD;AAAA,SACzBrB,cAAcqB,GADW;AAAA,CAApB;;AAGA,IAAMC,wBAAQ;AACnBC,WAAS,iBAACd,MAAD;AAAA,WACPD,YAAY,OAAZ,EAAqBC,MAArB,CADO;AAAA,GADU;AAGnBe,aAAW,mBAACC,OAAD,EAAUhB,MAAV;AAAA,WACTD,uBAAqBiB,OAArB,EAAgChB,MAAhC,CADS;AAAA,GAHQ;AAKnBiB,aAAW,mBAACD,OAAD,EAAUhB,MAAV;AAAA,WACTD,uBAAqBiB,OAArB,cAAuChB,MAAvC,CADS;AAAA,GALQ;AAOnBkB,cAAY,oBAACF,OAAD,EAAUhB,MAAV;AAAA,WACVD,uBAAqBiB,OAArB,eAAwChB,MAAxC,CADU;AAAA,GAPO;AASnBmB,oBAAkB,0BAACH,OAAD,EAAUhB,MAAV;AAAA,WAChBD,uBAAqBiB,OAArB,qBAA8ChB,MAA9C,CADgB;AAAA,GATC;AAWnBoB,cAAY,oBAACJ,OAAD,EAAUhB,MAAV;AAAA,WACVD,uBAAqBiB,OAArB,cAAuChB,MAAvC,CADU;AAAA,GAXO;AAanBqB,mBAAiB,yBAACL,OAAD,EAAUM,QAAV,EAAoBtB,MAApB;AAAA,WACfD,uBAAqBiB,OAArB,gBAAuCM,QAAvC,aAAyDtB,MAAzD,CADe;AAAA;AAbE,CAAd;;AAiBA,IAAMuB,wBAAQ;AACnBR,aAAW,mBAACS,YAAD,EAAexB,MAAf;AAAA,WACTD,uBAAqByB,YAArB,EAAqCxB,MAArC,CADS;AAAA,GADQ;AAGnByB,iBAAe,uBAACD,YAAD,EAAexB,MAAf;AAAA,WACbD,uBAAqByB,YAArB,kBAAgDxB,MAAhD,CADa;AAAA;AAHI,CAAd;;AAOA,IAAM0B,0BAAS;AACpBX,aAAW,mBAACO,QAAD,EAAWtB,MAAX;AAAA,WACTD,wBAAsBuB,QAAtB,EAAkCtB,MAAlC,CADS;AAAA,GADS;AAGpBiB,aAAW,mBAACK,QAAD,EAAWtB,MAAX;AAAA,WACTD,wBAAsBuB,QAAtB,aAAwCtB,MAAxC,CADS;AAAA,GAHS;AAKpB2B,qBAAmB,2BAACL,QAAD,EAAWtB,MAAX;AAAA,WACjBD,wBAAsBuB,QAAtB,kBAA6CtB,MAA7C,CADiB;AAAA,GALC;AAOpB4B,eAAa,qBAACN,QAAD,EAAWO,QAAX,EAAqB7B,MAArB;AAAA,WACXD,wBAAsBuB,QAAtB,oBAA6CO,QAA7C,EAAyD7B,MAAzD,CADW;AAAA;AAPO,CAAf","file":"index.js","sourcesContent":["let endpointUrl = 'http://localhost:3001';\nconst api = 'rest/agile/1.0';\n\nconst fetchSettings = {\n  method: 'GET',\n  mode: 'cors',\n  cache: 'default',\n};\n\nconst esc = encodeURIComponent;\n\nexport const makeRequest = (method, params = {}) => {\n  const query = Object.keys(params)\n    .map(k => `${esc(k)}=${esc(params[k])}`)\n    .join('&');\n\n  return fetch(`${endpointUrl}/${api}/${method}?${query}`, fetchSettings)\n    .then(response => response.json());\n};\n\nexport const setEndpoint = (url) =>\n  endpointUrl = url;\n\nexport const board = {\n  getList: (params) =>\n    makeRequest('board', params),\n  getSingle: (boardId, params) =>\n    makeRequest(`board/${boardId}`, params),\n  getIssues: (boardId, params) =>\n    makeRequest(`board/${boardId}/issues`, params),\n  getBacklog: (boardId, params) =>\n    makeRequest(`board/${boardId}/backlog`, params),\n  getConfiguration: (boardId, params) =>\n    makeRequest(`board/${boardId}/configuration`, params),\n  getSprints: (boardId, params) =>\n    makeRequest(`board/${boardId}/sprint`, params),\n  getSprintIssues: (boardId, sprintId, params) =>\n    makeRequest(`board/${boardId}/sprint/${sprintId}/issue`, params),\n};\n\nexport const issue = {\n  getSingle: (issueIdOrKey, params) =>\n    makeRequest(`issue/${issueIdOrKey}`, params),\n  getEstimation: (issueIdOrKey, params) =>\n    makeRequest(`issue/${issueIdOrKey}/estimation`, params),\n};\n\nexport const sprint = {\n  getSingle: (sprintId, params) =>\n    makeRequest(`sprint/${sprintId}`, params),\n  getIssues: (sprintId, params) =>\n    makeRequest(`sprint/${sprintId}/issue`, params),\n  getPropertiesKeys: (sprintId, params) =>\n    makeRequest(`sprint/${sprintId}/properties`, params),\n  getProperty: (sprintId, property, params) =>\n    makeRequest(`sprint/${sprintId}/properties/${property}`, params),\n};\n"]}